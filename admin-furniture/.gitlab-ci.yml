include:
  - local: .gitlab/.pipeline-template.yml
  - local: .gitlab/.pipeline-environment.yml

cache:
  key:
    files:
      - pnpm-lock.yaml
  paths:
    - .pnpm-store

stages:
  - prepare
  - test
  - build
  - deploy

test_lint:
  stage: test
  image: node:latest
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - pnpm lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH
      changes:
        - package.json
        - pnpm-lock.yaml
        - next.config.js
        - .env
        - .env.production
        - src/**/*

test_build:
  stage: test
  image: node:latest
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install
    - pnpm build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH
      changes:
        - package.json
        - pnpm-lock.yaml
        - next.config.js
        - .env
        - .env.production
        - src/**/*

build_docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_PROTECTED != "true"
      when: never
    - if: $CI_COMMIT_BRANCH
      changes:
        - Dockerfile
        - package.json
        - pnpm-lock.yaml
        - next.config.js
        - .env
        - .env.production
        - src/**/*

deploy_staging 1/2:
  extends: .apply
  variables: !reference [.staging, variables]
  environment:
    name: staging
    action: prepare
  rules:
    - !reference [.staging, rules]
    - if: $CI_COMMIT_BRANCH == "staging"
      exists:
        - Dockerfile
      changes:
        - $COMPOSE_FILE

deploy_staging 2/2:
  extends: .deploy
  variables: !reference [.staging, variables]
  environment:
    name: staging
    url: https://templates-next-app.go.drimaesvn.com
    on_stop: shutdown_staging
  rules:
    - !reference [.staging, rules]
    - if: $CI_COMMIT_BRANCH == "staging"
      exists:
        - Dockerfile

shutdown_staging:
  extends: .shutdown
  variables: !reference [.staging, variables]
  environment:
    name: staging
    action: stop
  rules:
    - !reference [.staging, rules]
    - if: $CI_COMMIT_BRANCH == "staging"
      exists:
        - Dockerfile

merge_to_staging:
  extends: .merge
  variables:
    SSH_KEY: "$GLOBAL_STAGING_SSH_KEY"
    TARGET_BRANCH: "staging"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - Dockerfile

pnpm_update:
  stage: prepare
  image: node:latest
  variables:
    SSH_KEY: "$GLOBAL_STAGING_SSH_KEY"
  before_script:
    - !reference [.ssh_job, before_script]
    - corepack enable
    - corepack prepare pnpm@latest --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - git config user.name "$GITLAB_USER_LOGIN"
    - git config user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin $GLOBAL_SSH_REPO/$CI_PROJECT_PATH
    - git config pull.rebase false
    - git config --list
    - git checkout gitbot
    - pnpm install
    - git pull origin
    - pnpm install
    - git merge origin/main
    - pnpm install
    - pnpm up --latest
    - git add -A
    - |
      git commit -m "BOT-00: update dependencies"
    - git push
  rules:
    - if: $CI_COMMIT_BRANCH == "gitbot" && $CI_PIPELINE_SOURCE == "schedule"

merge_to_main:
  extends: .merge
  variables:
    SSH_KEY: "$GLOBAL_STAGING_SSH_KEY"
    TARGET_BRANCH: "main"
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
